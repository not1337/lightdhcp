diff -rNu dhcpcd-dhcpcd-9.0.1/configure.sh dhcpcd-9.0.1/configure.sh
--- dhcpcd-dhcpcd-9.0.1/configure.sh	1970-01-01 01:00:00.000000000 +0100
+++ dhcpcd-9.0.1/configure.sh	2020-04-24 13:17:13.320391794 +0200
@@ -0,0 +1,2 @@
+#!/bin/sh
+exec ./configure --dbdir=/var/lib/dhcpcd5 --disable-privsep --rundir=/run/dhcpcd --libexecdir=/lib/dhcpcd CFLAGS="-Os $* -DSCRIPT=NULL"
diff -rNu dhcpcd-dhcpcd-9.0.1/src/arp.c dhcpcd-9.0.1/src/arp.c
--- dhcpcd-dhcpcd-9.0.1/src/arp.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/arp.c	2020-04-24 13:17:13.321391807 +0200
@@ -560,6 +560,7 @@
 void
 arp_ifannounceaddr(struct interface *ifp, const struct in_addr *ia)
 {
+#if 0
 	struct arp_state *astate;
 
 	if (ifp->flags & IFF_NOARP)
@@ -573,11 +574,13 @@
 		astate->announced_cb = arp_free;
 	}
 	arp_announce(astate);
+#endif
 }
 
 void
 arp_announceaddr(struct dhcpcd_ctx *ctx, const struct in_addr *ia)
 {
+#if 0
 	struct interface *ifp, *iff = NULL;
 	struct ipv4_addr *iap;
 
@@ -599,6 +602,7 @@
 		return;
 
 	arp_ifannounceaddr(iff, ia);
+#endif
 }
 
 void
diff -rNu dhcpcd-dhcpcd-9.0.1/src/dhcp6.c dhcpcd-9.0.1/src/dhcp6.c
--- dhcpcd-dhcpcd-9.0.1/src/dhcp6.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/dhcp6.c	2020-04-24 13:17:13.322391818 +0200
@@ -2495,6 +2495,7 @@
 static ssize_t
 dhcp6_writelease(const struct interface *ifp)
 {
+#if 0
 	const struct dhcp6_state *state;
 	int fd;
 	ssize_t bytes;
@@ -2508,11 +2509,16 @@
 	bytes = write(fd, state->new, state->new_len);
 	close(fd);
 	return bytes;
+#else
+	const struct dhcp6_state *state = D6_CSTATE(ifp);
+	return state->new_len;
+#endif
 }
 
 static int
 dhcp6_readlease(struct interface *ifp, int validate)
 {
+#if 0
 	struct dhcp6_state *state;
 	struct stat st;
 	int fd;
@@ -2612,11 +2618,16 @@
 
 ex:
 	dhcp6_freedrop_addrs(ifp, 0, NULL);
+#if 0
 	unlink(state->leasefile);
+#endif
 	free(state->new);
 	state->new = NULL;
 	state->new_len = 0;
 	return retval;
+#else
+	return 0;
+#endif
 }
 
 static void
@@ -3931,7 +3942,9 @@
 				dhcp6_startrelease(ifp);
 				return;
 			}
+#if 0
 			unlink(state->leasefile);
+#endif
 		}
 		dhcp6_freedrop_addrs(ifp, drop, NULL);
 		free(state->old);
diff -rNu dhcpcd-dhcpcd-9.0.1/src/dhcp.c dhcpcd-9.0.1/src/dhcp.c
--- dhcpcd-dhcpcd-9.0.1/src/dhcp.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/dhcp.c	2020-04-24 13:17:13.324391843 +0200
@@ -1145,6 +1145,7 @@
 static ssize_t
 write_lease(const struct interface *ifp, const struct bootp *bootp, size_t len)
 {
+#if 0
 	int fd;
 	ssize_t bytes;
 	const struct dhcp_state *state = D_CSTATE(ifp);
@@ -1157,11 +1158,15 @@
 	bytes = write(fd, bootp, len);
 	close(fd);
 	return bytes;
+#else
+	return len;
+#endif
 }
 
 static size_t
 read_lease(struct interface *ifp, struct bootp **bootp)
 {
+#if 0
 	int fd;
 	bool fd_opened;
 	struct dhcp_state *state = D_STATE(ifp);
@@ -1249,6 +1254,9 @@
 out:
 	*bootp = (struct bootp *)lease;
 	return bytes;
+#else
+	return 0;
+#endif
 }
 
 static const struct dhcp_opt *
@@ -1929,7 +1937,9 @@
 
 	eloop_timeout_delete(ifp->ctx->eloop, NULL, ifp);
 	dhcp_drop(ifp, "EXPIRE");
+#if 0
 	unlink(state->leasefile);
+#endif
 	state->interval = 0;
 	if (!(ifp->options->options & DHCPCD_LINK) || ifp->carrier > LINK_DOWN)
 		dhcp_discover(ifp);
@@ -2072,7 +2082,9 @@
 
 	/* RFC 2131 3.1.5, Client-server interaction */
 	logerrx("%s: DAD detected %s", ifp->name, inet_ntoa(*ia));
+#if 0
 	unlink(state->leasefile);
+#endif
 	if (!(opts & DHCPCD_STATIC) && !state->lease.frominfo)
 		dhcp_decline(ifp);
 #ifdef IN_IFF_DUPLICATED
@@ -2749,7 +2761,9 @@
 			return;
 		state->state = DHS_RELEASE;
 
+#if 0
 		unlink(state->leasefile);
+#endif
 		if (ifp->carrier > LINK_DOWN &&
 		    state->new != NULL &&
 		    state->lease.server.s_addr != INADDR_ANY)
@@ -3110,7 +3124,9 @@
 			return;
 		if (!(ifp->ctx->options & DHCPCD_TEST)) {
 			dhcp_drop(ifp, "NAK");
+#if 0
 			unlink(state->leasefile);
+#endif
 		}
 
 		/* If we constantly get NAKS then we should slowly back off */
@@ -3776,8 +3792,10 @@
 	ifo = ifp->options;
 	/* We need to drop the leasefile so that dhcp_start
 	 * doesn't load it. */
+#if 0
 	if (ifo->options & DHCPCD_REQUEST)
 		unlink(state->leasefile);
+#endif
 
 	free(state->clientid);
 	state->clientid = NULL;
@@ -3961,6 +3979,7 @@
 			free(state->offer);
 			state->offer = NULL;
 			state->offer_len = 0;
+#if 0
 		} else if (!(ifo->options & DHCPCD_LASTLEASE_EXTEND) &&
 		    state->lease.leasetime != DHCP_INFINITE_LIFETIME &&
 		    stat(state->leasefile, &st) == 0)
@@ -4000,6 +4019,7 @@
 				state->lease.renewaltime -= l;
 				state->lease.rebindtime -= l;
 			}
+#endif
 		}
 	}
 
diff -rNu dhcpcd-dhcpcd-9.0.1/src/dhcpcd.c dhcpcd-9.0.1/src/dhcpcd.c
--- dhcpcd-dhcpcd-9.0.1/src/dhcpcd.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/dhcpcd.c	2020-04-24 13:17:13.324391843 +0200
@@ -1963,6 +1963,7 @@
 #ifdef THERE_IS_NO_FORK
 	ctx.options &= ~DHCPCD_DAEMONISE;
 #endif
+	if(!ifo->script)usleep(500000);
 
 	if (ctx.options & DHCPCD_DEBUG)
 		logsetopts(logopts | LOGERR_DEBUG);
diff -rNu dhcpcd-dhcpcd-9.0.1/src/dhcp-common.c dhcpcd-9.0.1/src/dhcp-common.c
--- dhcpcd-dhcpcd-9.0.1/src/dhcp-common.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/dhcp-common.c	2020-04-24 13:17:13.324391843 +0200
@@ -158,8 +158,8 @@
 	return NULL;
 }
 
-ssize_t
-dhcp_vendor(char *str, size_t len)
+static ssize_t
+dhcp_vendor_uncached(char *str, size_t len)
 {
 	struct utsname utn;
 	char *p;
@@ -183,6 +183,23 @@
 	return p - str;
 }
 
+ssize_t
+dhcp_vendor(char *str, size_t len)
+{
+	static int cachestate = 0;
+	static int lencache;
+	static uint8_t strcache[VENDORCLASSID_MAX_LEN + 1];
+
+	if (!cachestate) {
+		cachestate = 1;
+		lencache = dhcp_vendor_uncached(strcache, sizeof(strcache));
+	}
+	if (lencache < 0 || lencache >= len)
+		return -1;
+	memcpy(str, strcache, lencache);
+	return lencache;
+}
+
 int
 make_option_mask(const struct dhcp_opt *dopts, size_t dopts_len,
     const struct dhcp_opt *odopts, size_t odopts_len,
diff -rNu dhcpcd-dhcpcd-9.0.1/src/duid.c dhcpcd-9.0.1/src/duid.c
--- dhcpcd-dhcpcd-9.0.1/src/duid.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/duid.c	2020-04-24 13:17:13.324391843 +0200
@@ -54,6 +54,7 @@
 #include "duid.h"
 #include "logerr.h"
 
+#if 0
 static size_t
 duid_machineuuid(char *uuid, size_t uuid_len)
 {
@@ -114,6 +115,7 @@
 	l += hwaddr_aton(d, uuid);
 	return l;
 }
+#endif
 
 size_t
 duid_make(void *d, const struct interface *ifp, uint16_t type)
@@ -151,6 +153,7 @@
 static size_t
 duid_get(uint8_t **d, const struct interface *ifp)
 {
+#if 0
 	FILE *fp;
 	uint8_t *data;
 	size_t len;
@@ -217,6 +220,17 @@
 		return duid_make(data, ifp, DUID_LL);
 	}
 	return len;
+#else
+	uint8_t *data;
+
+	if ((data = malloc(DUID_LEN)) == NULL) {
+		logerr(__func__);
+		return 0;
+	}
+	memset(data,0,DUID_LEN);
+	*d = data;
+	return duid_make(data, ifp, DUID_LL);
+#endif
 }
 
 size_t duid_init(const struct interface *ifp)
diff -rNu dhcpcd-dhcpcd-9.0.1/src/if-linux.c dhcpcd-9.0.1/src/if-linux.c
--- dhcpcd-dhcpcd-9.0.1/src/if-linux.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/if-linux.c	2020-04-24 13:17:13.324391843 +0200
@@ -391,13 +391,14 @@
 	 * pid that doesn't clash with a process id for after we fork. */
 	memset(&snl, 0, sizeof(snl));
 	snl.nl_groups = RTMGRP_LINK;
-
+#if 0
 #ifdef INET
 	snl.nl_groups |= RTMGRP_IPV4_ROUTE | RTMGRP_IPV4_IFADDR;
 #endif
 #ifdef INET6
 	snl.nl_groups |= RTMGRP_IPV6_ROUTE | RTMGRP_IPV6_IFADDR | RTMGRP_NEIGH;
 #endif
+#endif
 
 	ctx->link_fd = if_linksocket(&snl, NETLINK_ROUTE);
 	if (ctx->link_fd == -1)
@@ -1624,6 +1625,13 @@
 		return -1;
 #undef SF
 
+#ifdef PACKET_IGNORE_OUTGOING
+	n=1;
+	if(setsockopt(s,SOL_PACKET,PACKET_IGNORE_OUTGOING,&s,sizeof(s)))
+		if(errno != EINVAL)
+			goto eexit;
+#endif
+
 	/* We cannot validate the correct interface,
 	 * so we MUST set this first. */
 	if (bind(s, &su.sa, sizeof(su.sll)) == -1)
@@ -2064,6 +2072,7 @@
 int
 ip6_forwarding(const char *ifname)
 {
+#if 0
 	char path[256];
 	int val;
 
@@ -2072,6 +2081,9 @@
 	snprintf(path, sizeof(path), "%s/%s/forwarding", p_conf, ifname);
 	val = check_proc_int(path);
 	return val == -1 ? 0 : val;
+#else
+	return 0;
+#endif
 }
 
 #endif /* INET6 */
diff -rNu dhcpcd-dhcpcd-9.0.1/src/ipv6nd.c dhcpcd-9.0.1/src/ipv6nd.c
--- dhcpcd-dhcpcd-9.0.1/src/ipv6nd.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/ipv6nd.c	2020-04-24 13:17:13.325391855 +0200
@@ -58,6 +58,14 @@
 #include "route.h"
 #include "script.h"
 
+#ifdef ND6_ADVERTISE
+#undef ND6_ADVERTISE
+#endif
+#ifndef SMALL
+#define SMALL
+#endif
+void ipv6nd_advertise(struct ipv6_addr *ia) {}
+
 /* Debugging Router Solicitations is a lot of spam, so disable it */
 //#define DEBUG_RS
 
diff -rNu dhcpcd-dhcpcd-9.0.1/src/route.c dhcpcd-9.0.1/src/route.c
--- dhcpcd-dhcpcd-9.0.1/src/route.c	2020-04-13 17:09:08.000000000 +0200
+++ dhcpcd-9.0.1/src/route.c	2020-04-24 14:12:45.124049261 +0200
@@ -679,14 +679,28 @@
 void
 rt_build(struct dhcpcd_ctx *ctx, int af)
 {
-	rb_tree_t routes, added, kroutes;
+	static int valid4=0, valid6=0;
+	int *valid;
+	static rb_tree_t lclkroutes4, lclkroutes6;
+	rb_tree_t routes, added;
+	rb_tree_t *kroutes;
 	struct rt *rt, *rtn;
 	unsigned long long o;
 
+	if(af==AF_INET) {
+		valid=&valid4;
+		kroutes=&lclkroutes4;
+	} else {
+		valid=&valid6;
+		kroutes=&lclkroutes6;
+	}
 	rb_tree_init(&routes, &rt_compare_proto_ops);
 	rb_tree_init(&added, &rt_compare_os_ops);
-	rb_tree_init(&kroutes, &rt_compare_os_ops);
-	if_initrt(ctx, &kroutes, af);
+	if(!*valid) {
+		rb_tree_init(kroutes, &rt_compare_os_ops);
+		if_initrt(ctx, kroutes, af);
+		*valid=1;
+	}
 	ctx->rt_order = 0;
 	ctx->options |= DHCPCD_RTBUILD;
 
@@ -718,7 +732,7 @@
 		/* Is this route already in our table? */
 		if (rb_tree_find_node(&added, rt) != NULL)
 			continue;
-		if (rt_doroute(&kroutes, rt)) {
+		if (rt_doroute(kroutes, rt)) {
 			rb_tree_remove_node(&routes, rt);
 			if (rb_tree_insert_node(&added, rt) != rt) {
 				errno = EEXIST;
@@ -766,5 +780,6 @@
 
 getfail:
 	rt_headclear(&routes, AF_UNSPEC);
-	rt_headclear(&kroutes, AF_UNSPEC);
+	if(!*valid)
+		rt_headclear(kroutes, AF_UNSPEC);
 }
